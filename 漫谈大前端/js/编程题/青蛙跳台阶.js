//题目描述1：一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个n级的台阶总共有多少种跳法
/* 
1.如果只有1级台阶， 那显然只有一种跳法
2.如果有2级台阶， 那么就有2种跳法， 一种是分2次跳。 每次跳1级， 另一种就是一次跳2级
3.如果台阶级数大于2， 设为n的话， 这时我们把n级台阶时的跳法看成n的函数，记为f(n), 第一次跳的时候有2种不同的选择： 一是第一次跳一级， 此时跳法的数目等于后面剩下的n - 1 级台阶的跳法数目，即为f(n - 1), 二是第一次跳二级， 此时跳法的数目等于后面剩下的n - 2 级台阶的跳法数目，即为f(n - 2), 因此n级台阶的不同跳法的总数为f(n) = f(n - 1) + f(n - 2), 不难看出就是斐波那契数列
*/

function fibonacci(num, rest1=1, rest2=1){
    if (num <= 2) {
        return rest2;
    }else{
        return fibonacci(num - 1, rest2, rest1 + rest2);
    }
}

//测试
console.log(fibonacci(4, rest1 = 1, rest2 = 1));






//题目描述2：一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。

//思路一：
/*
    如果台阶级数为n的话， 这时我们把n级台阶时的跳法看成n的函数， 记为f(n), 第一次跳的时候有n种不同的选择： 若是第一次跳一级， 此时跳法的数目等于后面剩下的n - 1 级台阶的跳法数目， 即为f(n-1), 若是第一次跳m(m < n) 级， 此时跳法的数目等于后面剩下的n - m级台阶的跳法数目， 即为f(n-m), 若是第一次跳n级， 此时跳法的数目等于1.所以
    f(n) = f(n-1)+f(n-2)+···f(n-m)+···+f(2)+f(1)+1
    因此f(n-1) = f(n-2)+···f(n-m)+···+f(2)+f(1)+1
    两式相减得:f(n) = 2f(n-1)
    f(n) = f(n-1)+f(n-2)+···f(n-m)+···+f(2)+f(1)+1
         = 1+f(1)+f(2)+···+f(n-m)+···+f(n-2)+f(n-1)
         = 1+f(1)+2f(1)+···+2^(n-m-1)f(1)+···+2^(n-3)f(1)+2^(n-2)f(1)
         = 1+2^0+2^1+···2^(n-m-1)+···+2^(n-3)+2^(n-2)
         = 2^(n-1)
*/

function jumpFloor(n){
    if (n < 0) {
        return -1;
    }else if (n <= 2) {
        return n;
    }
    let arr = [];
    arr[0] = 1;
    arr[1] = 1;
    for(let i = 2; i <= n; i++){
        arr[i] = 2 * arr[i - 1];
    }
    return arr[n];
}

//测试
console.log(jumpFloor(1));