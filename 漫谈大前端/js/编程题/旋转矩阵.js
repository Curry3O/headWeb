//题目：给你一幅由 N × N 矩阵表示的图像，其中每个像素的大小为 4 字节。请你设计一种算法，将图像旋转 90 度。不占用额外内存空间能否做到？
/* 
例子1：
给定 matrix = [
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]
    ],

    原地旋转输入矩阵， 使其变为: [
        [7, 4, 1],
        [8, 5, 2],
        [9, 6, 3]
    ]


例子2：
给定 matrix = [
        [5, 1, 9, 11],
        [2, 4, 8, 10],
        [13, 3, 6, 7],
        [15, 14, 12, 16]
    ],

    原地旋转输入矩阵， 使其变为: [
        [15, 13, 2, 5],
        [14, 3, 4, 1],
        [12, 6, 8, 9],
        [16, 7, 10, 11]
    ]
*/

/* 
思路：
很明显：
    第1行变成了第3列， 行中元素位置与列中元素位置一致
    第2行变成了第2列， 行中元素位置与列中元素位置一致
    第3行变成了第1列， 行中元素位置与列中元素位置一致
即： 矩阵中第i行的第j个元素， 在旋转后， 它出现在第j行倒数第i列

无额外数组
    试想， 如果可以把数组matrix构造成这个样子， 即翻转后的数组附加在原数组上， 最后再移除红框内的元素， 是否就可以实现无额外数组了？

    很明显， 原始matrix数组是N * N， 那么， 只需每行截取起始位（ 0） 到终止位（ 数组长度N）， 就可以剩下最终需要的数组内容了。

    利用伪代码实现的话， 大致如下：

    for (let i = 0; i < 数组长度; i++) {
        matrix[i].splice(0, 数组长度);
    }

翻转实现
    由于matrix是二维数组， 故必然需要双重循环才能遍历到每个元素。

    那么是不是可以在遍历的是否做点文章呢？

    前文已知， 矩阵中第i行的第j个元素， 在旋转后， 它出现在倒数第i列的第j个位置。

    如何才能用代码实现这句话？

    可以参考下面的伪代码：

    // 反向遍历最外层数组，即矩阵的行
    for (let i = 数组长度 - 1; i >= 0; i--) {
        for (let j = 0; j < 数组长度; j++) {
            // 倒数第N行变成正数第N列
            matrix[j].push(matrix[i][j]);
        }
    }
*/

/**
 * @param {number[][]} matrix
 * @return {void} Do not return anything, modify matrix in-place instead.
 */
var rotate = function (matrix) {
    const length = matrix.length;

    for (let i = length - 1; i >= 0; i--) {
        for (let j = 0; j < length; j++) {
            matrix[j].push(matrix[i][j]);
        }
    }

    for (let i = 0; i < length; i++) {
        matrix[i].splice(0, length);
    }
};

//测试
var matrix = [
        [5, 1, 9, 11],
        [2, 4, 8, 10],
        [13, 3, 6, 7],
        [15, 14, 12, 16]
    ];
rotate(matrix);
console.log(matrix);